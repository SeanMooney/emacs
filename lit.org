#+TITLE: Emacs: A Literate Configuration
#+AUTHOR: Sean Mooney
#+PROPERTY: header-args :tangle yes
#+STARTUP: content

This is a literate Emacs configuration file written in Org mode.
The primary goal is to create a setup that is well-documented, modular, and easy to maintain.
All configuration is tangled into `init.el` upon saving this file.

* Early Init
This section contains critical setup that must run at the very beginning of the
Emacs startup process, before any packages are loaded.

** Early UI Tweaks
These settings disable distracting UI elements and set up fundamental frame behavior
to ensure a clean and predictable launch.

#+BEGIN_SRC emacs-lisp
  ;; Set frame behavior early
  (setq frame-resize-pixelwise t
        frame-inhibit-implied-resize t)

  ;; Disable UI elements for a minimal appearance
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (set-fringe-mode 10) ; A little breathing room

  ;; Inhibit startup screens and messages for a faster, quieter launch
  (setq inhibit-splash-screen t
        inhibit-startup-screen t
        inhibit-x-resources t
        inhibit-startup-echo-area-message user-login-name
        inhibit-startup-buffer-menu t
        inhibit-startup-message t)

  ;; Set up the visible bell instead of an audible one
  (setq visible-bell t)

  ;; Use short 'y/n' answers instead of 'yes/no'
  (setq use-short-answers t)
#+END_SRC

** Package Management (straight.el)
I use `straight.el` for package management, which works directly with Git repositories.
It is paired with `use-package` for declarative configuration.
This block bootstraps `straight.el` if it's not already installed.

#+BEGIN_SRC emacs-lisp
  (setq straight-use-package-by-default t)
  ;; Ensure we can get packages from nongnu.org
  (custom-set-variables
   '(straight-recipe-overrides '((nil
                                (nongnu-elpa :type git
                                             :repo "[https://github.com/emacsmirror/nongnu_elpa](https://github.com/emacsmirror/nongnu_elpa)"
                                             :depth (full single-branch)
                                             :local-repo "nongnu-elpa"
                                             :build nil)))))

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "[https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el](https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el)"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Ensure all `use-package` declarations will try to install the package if missing.
  (setq use-package-always-ensure t)
#+END_SRC

** Early Org Mode Setup
This configures Org mode basics, especially the function to automatically tangle this configuration file
(`Emacs.org` -> `init.el`) every time it is saved.

#+BEGIN_SRC emacs-lisp
  (setq org-support-shift-select t)

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    "Auto-tangle config file on save."
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'efs/org-babel-tangle-config nil 'local)))


  (with-eval-after-load 'org
    (require 'org-tempo) ;; Needed as of Org 9.2 for structure templates
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+END_SRC

* Core Emacs Behavior
This section configures the fundamental, non-UI behavior of Emacs, from user information to editing enhancements and file handling.

** User & System Defaults
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :ensure nil
    :custom
    (user-full-name "Sean Mooney")
    (user-mail-address "sean@seanmooney.info")
    ;; Use UTF-8 everywhere
    (coding-system-for-read 'utf-8)
    (coding-system-for-write 'utf-8)
    (ad-redefinition-action 'accept)
    ;; Don't create lockfiles
    (create-lockfiles nil)
    ;; Disable backup files
    (make-backup-files nil)
    (backup-inhibited t))
#+END_SRC

** Editing Enhancements
These settings improve the core text editing experience.

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :ensure nil
    :bind (("M-o" . other-window)
           ("M-j" . duplicate-dwim)
           ("RET" . newline-and-indent)
           ;; Unbind some keys to use for other purposes
           ("C-z" . nil)
           ("C-x C-z" . nil)
           ("C-x C-k RET" . nil))
    :custom
    ;; Case-insensitive completion is more convenient.
    (completion-ignore-case t)
    (completions-detailed t)
    ;; Highlight the current line in programming, text, and org modes.
    (global-hl-line-mode t)
    ;; When pasting, overwrite the currently selected region.
    (delete-selection-mode 1)
    ;; Assistive pop-up window for help commands
    (help-window-select t)
    ;; Don't store duplicate entries in the kill ring
    (kill-do-not-save-duplicates t)
    ;; Default width for text wrapping
    (fill-column 80)
    ;; Show column number in the mode line
    (column-number-mode 1))

  ;; Enable line numbers for modes where it's most useful.
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode #'display-line-numbers-mode))

  ;; But disable them for modes where they are distracting.
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode -1))))


  ;; Automatically pair delimiters like parentheses and quotes.
  (use-package elec-pair
    :ensure nil
    :hook (after-init . electric-pair-mode)
    :config
    ;; A handy command for deleting a pair of surrounding delimiters.
    (global-set-key (kbd "C-c d") #'delete-pair)
    (setq delete-pair-blink-delay 0.0))

  ;; Visually highlight matching parentheses.
  (use-package paren
    :ensure nil
    :hook (after-init . show-paren-mode)
    :custom
    (show-paren-style 'mixed)
    (show-paren-context-when-offscreen t))

  ;; Allows repeating commands with C-x z.
  (use-package repeat
    :config
    (repeat-mode 1))
#+END_SRC

** File Handling & Saving
This configures how Emacs handles files, symlinks, and saving state.

#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :straight (:type built-in)
    :custom
    ;; Prefer newer versions of files when loading Lisp code.
    (load-prefer-newer t)
    ;; Don't warn me about large files. I know what I'm doing.
    (large-file-warning-threshold nil)
    ;; When visiting a file, resolve symlinks to the true path.
    (find-file-visit-truename t))

  ;; Remember the cursor position in files between sessions.
  (use-package saveplace
    :ensure nil
    :hook (after-init . save-place-mode))

  ;; Remember minibuffer history between sessions.
  (use-package savehist
    :ensure nil
    :hook (after-init . savehist-mode)
    :custom (history-length 300))

  ;; Automatically revert file buffers when they change on disk.
  (use-package autorevert
    :ensure nil
    :config (global-auto-revert-mode 1))
#+END_SRC

** Version Control
Settings for Emacs's built-in version control integration.

#+BEGIN_SRC emacs-lisp
  (use-package vc
    :ensure nil
    :custom
    ;; VC should follow symbolic links.
    (vc-follow-symlinks t))
#+END_SRC

* User Interface
This section covers all visual aspects of Emacs, from fonts and colors to window layouts and completion UIs.

** Fonts (Fontaine)
I use the `fontaine` package to easily switch between predefined font configurations. My default is `Source Code Pro` for code and `FiraGO` for proportional text.

#+BEGIN_SRC emacs-lisp
  (use-package fontaine
    :demand t
    :init
    (setq fontaine-latest-state-file
          (locate-user-emacs-file "fontaine-latest-state.eld"))
    (setq fontaine-presets
          '((small
             :default-height 90)
            (regular
             :default-height 120)
            (medium
             :default-weight semilight
             :default-height 140)
            (large
             :default-weight semilight
             :default-height 180
             :bold-weight extrabold)
            (t ; our shared fallback properties
             :default-family "Source Code Pro"
             :default-weight semilight
             :default-height 100
             :variable-pitch-family "FiraGO"
             :variable-pitch-weight normal
             :variable-pitch-height 1.05
             :bold-weight bold
             :italic-slant italic)))
    :bind ("C-c f" . fontaine-set-preset))
#+END_SRC

** Theming (ef-themes)
I use the `ef-themes` collection by Protesilaos Stavrou for its excellent contrast and beautiful color palettes. I define a dark (`ef-cherie`) and light (`ef-summer`) theme to toggle between.

#+BEGIN_SRC emacs-lisp
  (use-package ef-themes
    :config
    ;; Define the pair of themes to toggle between.
    (setq ef-themes-to-toggle '(ef-cherie ef-summer))
    ;; Disable all other themes to avoid awkward blending.
    (mapc #'disable-theme custom-enabled-themes)
    ;; Load the default dark theme.
    (load-theme 'ef-cherie :no-confirm))
#+END_SRC

** Frame and Window Management
These settings control the appearance of the Emacs frame, windows, and how they are split.

#+BEGIN_SRC emacs-lisp
  ;; Enable smooth, pixel-based scrolling.
  (setq pixel-scroll-precision-mode t)
  (setq pixel-scroll-precision-use-momentum nil)

  ;; Add a hint of transparency and maximize the frame on startup.
  (set-frame-parameter (selected-frame) 'alpha-background 93)
  (add-to-list 'default-frame-alist '(alpha-background . 93))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Improve display characters in terminal mode.
  (set-display-table-slot standard-display-table 'vertical-border ?\u2502)
  (set-display-table-slot standard-display-table 'truncation ?\u2192)

  ;; Custom function to toggle a 2-window split between vertical and horizontal.
  (defun toggle-window-split ()
    "Switch between horizontal and vertical split window layout."
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges) (car next-win-edges))
                                       (<= (cadr this-win-edges) (cadr next-win-edges)))))
               (splitter (if (= (car this-win-edges) (car (window-edges (next-window))))
                             'split-window-horizontally
                           'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))
  (global-set-key (kbd "C-c j") #'toggle-window-split)
#+END_SRC

** Minibuffer & Completion Framework
I use a modern completion system composed of several packages that work together.
- =vertico= provides the core vertical minibuffer UI.
- =marginalia= adds rich annotations (file permissions, command docs) to completions.
- =orderless= enables powerful out-of-order matching.
- =consult= enhances built-in commands like `find-file` and `switch-to-buffer` with previews.
- =corfu= provides an in-buffer completion popup.

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :init (vertico-mode)
    :custom
    (vertico-cycle t)
    (vertico-resize nil))

  (use-package marginalia
    :after vertico
    :init (marginalia-mode))

  (use-package orderless
    :custom
    (completion-styles '(orderless flex basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  (use-package corfu
    :custom
    (corfu-auto nil)
    (corfu-auto-delay 0.1)
    (corfu-quit-no-match 'separator)
    (global-corfu-modes '((not shell-mode) (not eshell-mode) t))
    :config
    (global-corfu-mode))

  (use-package consult
    :bind (("C-x f" . consult-find)
           ("M-s M-o" . consult-outline)
           ("C-f" . consult-line)
           ("C-x b" . consult-buffer)                ; a powerful switch-to-buffer
           ("C-j" . consult-imenu)
           ("C-x p b" . consult-project-buffer)
           ("M-y" . consult-yank-pop)
           ("M-g g" . consult-goto-line)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ("C-c h" . consult-history)
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)
           ("M-s e" . consult-isearch-history)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi))
    :init
    ;; Add consult bindings to org-mode and org-agenda
    (with-eval-after-load "org"
      (keymap-set org-mode-map "C-j" #'consult-org-heading))
    (with-eval-after-load "org-agenda"
      (keymap-set org-agenda-mode-map "C-j" #'consult-org-agenda))
    :config
    (setq consult-line-start-from-top nil)
    ;; Integrate with xref for "find definitions/references"
    (with-eval-after-load "xref"
      (require 'consult-xref)
      (setq xref-show-xrefs-function #'consult-xref)
      (setq xref-show-definitions-function #'consult-xref)))

  (use-package emacs
    :ensure nil
    :custom
    ;; Limit the height of the *Completions* buffer
    (completions-max-height 15)
    ;; Use TAB for completion first, then indent
    (tab-always-indent 'complete))
#+END_SRC

** Dired (File Manager)
Configuration for Dired, Emacs's built-in file manager.

#+BEGIN_SRC emacs-lisp
  (use-package dired
    :straight (:type built-in)
    :ensure nil
    :hook ((dired-mode . hl-line-mode)
           (dired-mode . dired-hide-details-mode))
    :custom
    (dired-listing-switches "-alFh") ; ls-like output
    (dired-dwim-target t)            ; Smart target for copying/renaming
    (dired-recursive-copies 'always)
    (dired-recursive-deletes 'always)
    (global-auto-revert-non-file-buffers t) ; Auto-refresh Dired buffers
    (auto-revert-verbose nil))
#+END_SRC

** Ibuffer (Buffer Manager)
I use Ibuffer to manage open buffers, with custom groups to keep things organized.

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :ensure nil
    :bind ("C-x C-b" . ibuffer)
    :custom
    (ibuffer-show-empty-filter-groups nil)
    (ibuffer-saved-filter-groups
     '(("default"
        ("org" (or (mode . org-mode) (name . "^\\*Org Src")))
        ("emacs" (or (name . "^\\*scratch\\*$") (name . "^\\*Messages\\*$")))
        ("dired" (mode . dired-mode))
        ("terminal" (or (mode . term-mode) (mode . shell-mode)))
        ("help" (or (name . "^\\*Help\\*$") (name . "^\\*helpful"))))))
    :config
    (add-hook 'ibuffer-mode-hook
              (lambda () (ibuffer-switch-to-saved-filter-groups "default"))))
#+END_SRC

** Helper UI (which-key, treemacs)
Additional UI packages that help with discoverability and navigation.

#+BEGIN_SRC emacs-lisp
  ;; `which-key` displays available keybindings in a popup.
  (use-package which-key
    :config
    (which-key-mode))

  ;; `treemacs` provides a file tree sidebar.
  (use-package treemacs
    :defer t
    :bind (("M-0"       . treemacs-select-window)
           ("C-x t 1"   . treemacs-delete-other-windows)
           ("C-x t t"   . treemacs)
           ("C-x t d"   . treemacs-select-directory))
    :config
    (setq treemacs-collapse-dirs (if treemacs-python-executable 3 0)
          treemacs-display-in-side-window t
          treemacs-follow-after-init t
          treemacs-expand-after-init t
          treemacs-git-command-pipe ""
          treemacs-hide-dot-git-directory t
          treemacs-indentation 2
          treemacs-litter-directories '("/node_modules" "/.venv" "/.cask")
          treemacs-position 'left
          treemacs-show-hidden-files t
          treemacs-width 35)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always))
#+END_SRC

* Development Environment
This section configures Emacs for software development, including linters,
language servers, and language-specific setups.

** General Tooling (LSP, Linters, Compilation)
These are language-agnostic tools that form the foundation of the IDE experience.

#+BEGIN_SRC emacs-lisp
  ;; `flycheck` is a modern on-the-fly syntax checking framework.
  (use-package flycheck
    :init (global-flycheck-mode))

  ;; `flymake` is the built-in alternative. I bind keys for navigating its diagnostics.
  (use-package flymake
    :ensure nil
    :bind (:map flymake-mode-map
           ("C-c n" . flymake-goto-next-error)
           ("C-c p" . flymake-goto-prev-error)))

  ;; `eglot` is a minimal, built-in LSP client.
  (use-package eglot
    :hook ((prog-mode . eglot-ensure))
    :bind (("C-c l c" . eglot-reconnect)
           ("C-c l d" . flymake-show-buffer-diagnostics)
           ("C-c l f f" . eglot-format)
           ("C-c l f b" . eglot-format-buffer)
           ("C-c l l" . eglot)
           ("C-c l r n" . eglot-rename)
           ("C-c l s" . eglot-shutdown)
           ("C-c l i" . eglot-inlay-hints-mode))
    :custom
    ;; Shutdown LSP server when the last managed buffer is killed.
    (eglot-autoshutdown t))

  ;; Configuration for Emacs's compilation interface.
  (use-package compile
    :ensure nil
    :bind (("C-c b" . compile)
           ("C-c B" . recompile))
    :custom
    (compilation-scroll-output 'first-error))
#+END_SRC

** Spell Checking (Flyspell)
I use Flyspell for on-the-fly spell checking, with a helper function to toggle it intelligently based on whether I'm writing code or prose.

#+BEGIN_SRC emacs-lisp
  (defun my-flyspell-setup ()
    "Enable Flyspell based on major mode.
In `prog-mode`, only check comments and strings.
In `text-mode`, check everything."
    (if (derived-mode-p 'prog-mode)
        (flyspell-prog-mode)
      (flyspell-mode 1)))

  (add-hook 'text-mode-hook #'my-flyspell-setup)
  (add-hook 'prog-mode-hook #'my-flyspell-setup)

  (defun my-flyspell-toggle ()
    "Toggle Flyspell on or off."
    (interactive)
    (if (symbol-value flyspell-mode)
        (progn (flyspell-mode -1) (message "Flyspell off"))
      (my-flyspell-setup)
      (message "Flyspell on")))

  (global-set-key (kbd "C-c $") #'my-flyspell-toggle)
#+END_SRC

** Tree-sitter
Tree-sitter provides faster and more accurate syntax parsing, which improves highlighting and code analysis. `treesit-auto` manages the installation of parsers.

#+BEGIN_SRC emacs-lisp
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+END_SRC

** Language: Python
This section configures the Python development environment, including virtual environment management with `pyvenv` and linting with `ruff`.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'vc-directory-exclusion-list ".venv")

  (use-package pyvenv
    :config
    (pyvenv-mode 1)
    ;; Set correct Python interpreter when a virtual env is activated/deactivated.
    (setq pyvenv-post-activate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
    (setq pyvenv-post-deactivate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter "python3")))))

  (use-package python
    :ensure nil
    :custom
    ;; Use the fast and powerful `ruff` linter for checking Python code.
    (python-check-command "ruff check --ignore-noqa"))
#+END_SRC

** Project-Specific Environment (direnv)
`direnv` is a tool that loads and unloads environment variables depending on the current directory. This package integrates it with Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+END_SRC

* Shell & Terminals
Configuration for various terminal emulators inside Emacs. I use `eat`, a modern term-mode replacement.

#+BEGIN_SRC emacs-lisp
  (straight-use-package
   '(eat :type git
         :host codeberg
         :repo "akib/emacs-eat"
         :files ("*.el" ("term" "term/*.el") "*.texi"
                 "*.ti" ("terminfo/e" "terminfo/e/*")
                 ("terminfo/65" "terminfo/65/*")
                 ("integration" "integration/*")
                 (:exclude ".dir-locals.el" "*-tests.el"))))

  (use-package eat
    :ensure nil ; It's installed by `straight-use-package` above
    :bind (("C-c s s" . shell)
           ("C-c s e" . eshell)
           ("C-c s t" . eat)
           ("C-c s a" . ansi-term)))
#+END_SRC

* GPT & AI
Configuration for `gptel`, a client for interacting with Large Language Models.

#+BEGIN_SRC emacs-lisp
  (use-package gptel
    :custom
    (gptel-default-mode 'org-mode)
    :config
    ;; Configure to use a local Ollama instance
    (setq gptel-backend (
        gptel-make-ollama "Ollama"
        :host "192.168.16.172:11434"
        :stream t
        :models '(
            "hf.co/unsloth/DeepSeek-R1-0528-Qwen3-8B-GGUF:UD-Q4_K_XL"
            "omaciel/ticketeer-granite3.3"
            "hf.co/unsloth/GLM-Z1-9B-0414-GGUF:Q5_K_XL"))))
#+END_SRC

* Custom Commands & Bindings
This section is for custom functions and global keybindings that don't belong to a specific package.

#+BEGIN_SRC emacs-lisp
  ;; Bury the current buffer instead of killing it.
  (global-set-key (kbd "C-c k") #'bury-buffer)

  ;; A convenient key for replacing text via regexp.
  (global-set-key (kbd "C-c r") #'replace-regexp)

  ;; Toggles whitespace visibility.
  (global-set-key (kbd "C-c w") #'whitespace-mode)

  ;; Command to fully restart the Emacs process.
  (global-set-key (kbd "C-c x r") #'restart-emacs)
#+END_SRC
